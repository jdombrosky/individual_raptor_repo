---
title: "2. Sampling Overlap"
author:
- name: Jonathan Dombrosky
  email: jdombrosky@crowcanyon.org
editor: source
self-contained: true
date: now
date-format: "MMMM D, YYYY h:mm A z"
message: false
warning: false
echo: false
---
## Packages Needed
```{r}
library(tidyverse)
library(SIBER)
library(sf)
library(spatstat)
library(ggtext)
library(ggpmisc)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("lag", "dplyr")
```

## Import Data
```{r}
my_data <- read.table("data/individual_raptor.txt", 
                      header = TRUE, 
                      fill = TRUE, sep = "\t") |> 
  mutate(D13C = case_when(Tissue == "Bone" ~ 2.7, #Hobson and Clark 1992; Table 2; Quail
                          Tissue == "Liver" ~ 0.2, #Hobson and Clark 1992; Table 2; Quail
                          Tissue == "Muscle" ~ 1.1), #Hobson and Clark 1992; Table 2; Quail
         D15N = case_when(Tissue == "Bone" ~ 2.5, #Hobson and Clark 1992; Table 2; Quail
                          Tissue == "Liver" ~ 2.3, #Hobson and Clark 1992; Table 2; Quail
                          Tissue == "Muscle" ~ 1.0), #Hobson and Clark 1992; Table 2; Quail
         D2H = case_when(Tissue == "Bone" ~ -37.0, #Curras et al. 2018, p. 10
                         Tissue == "Liver" ~ -20.0, #Curras et al. 2018, p. 10
                         Tissue == "Muscle" ~ -37.0, #Curras et al. 2018, p. 10
                         .default = 0),
         d13Cdiet = d13C - D13C,
         d15Ndiet = d15N - D15N,
         d2Hdiet = d2H - D2H)
```


## Create Functions
### replace number(0) with 0
```{r}
replace_zero <- function(x) {
     if(is.list(x)) lapply(x, replace_zero)
     else ifelse(length(x) == 0, 0, x)
}
```

## All Tissue 
### SIBER
```{r}
all_tiss_SIBER <- my_data |>
  dplyr::select(d13Cdiet, d15Ndiet, Individual) |>
  dplyr::mutate(community = 1) |>
  dplyr::rename(iso1 = d13Cdiet,
                iso2 = d15Ndiet,
                group = Individual) |> 
  drop_na()

siber.example <- createSiberObject(all_tiss_SIBER)

community.hulls.args <- list(col = 1, lty = 1, lwd = 1)
group.ellipses.args  <- list(n = 100, p.interval = 0.95, lty = 1, lwd = 2)
group.hull.args      <- list(lty = 2, col = "grey20")

plotSiberObject(siber.example,
                ax.pad = 2, 
                hulls = F, community.hulls.args, 
                ellipses = F, group.ellipses.args,
                group.hulls = F, group.hull.args,
                bty = "L",
                iso.order = c(1,2),
                xlab=expression({delta}^13*C[diet]~'\u2030'),
                ylab=expression({delta}^15*N[diet]~'\u2030'),
                cex = 1.5,
                cex.axis = 1.5,
                cex.lab = 1.5,
                col.axis = "gray29",
                col.lab = "gray29"
)

plotGroupEllipses(siber.example, n = 100, p.interval = 0.95, small.sample = TRUE,
                    lty = 1, lwd = 3)

group.ML3 <- groupMetricsML(siber.example)
print(group.ML3)
```

## Convert SIBER ellipses to sf polygons
```{r}
w <- siberKapow(
  all_tiss_SIBER,
  isoNames = c("iso1", "iso2"),
  group = "group",
  pEll = 0.95
)

# convert owin coordinates to sf polygons
sf_ellipses <- map(w[["owin.coords"]], ~ st_as_sf(.x)) |> 
  map(~ .x[["geom"]][[1]]) |> 
  st_sfc() |> 
  st_sf()
```

## Basic Overlap Calculation and Visualization
```{r}
i_all <- sf_ellipses |> 
  st_set_precision(45) |>  
  st_make_valid() |> 
  st_intersection() |> 
  mutate(group = "All Tissue")

i_all["n.overlaps"] |> 
  st_collection_extract("POLYGON") |> 
  plot(main = "All Tissue", breaks = 0:15, at = c(0, 5, 10, 15))

# precomputed total unionized area important in function below
union_area <- i_all |>
  st_union() |>
  st_area()
  

overlap <- i_all |>
  dplyr::filter(!n.overlaps == 1) |>
  st_union() |>
  st_area()

(overlap/union_area)*100
```

## Function to Iteratively Calculate Overlap
```{r}
calculate_overlap <- function(sample_size, sf_data, union_area, max_attempts = 10) {
  replicate_results <- replicate(30, {
    attempt <- 1
    valid_result <- FALSE
    result <- NA_real_  # use NA_real_ to ensure numeric type
    
    while (!valid_result && attempt <= max_attempts) {
      # randomly sample polygons
      sampled <- sf_data |> slice_sample(n = sample_size, replace = FALSE)

      # attempt intersection
      intersection <- tryCatch({
        sampled |> 
          st_set_precision(5) |> 
          st_make_valid() |> 
          st_intersection()
      }, error = function(e) {
        return(NULL)
      })
      
      if (!is.null(intersection) && length(intersection) > 0) {
        # overlap area
        overlap_area <- intersection |>
          filter(!n.overlaps == 1) |>
          st_union() |>
          st_area()
        
        # calculate %overlap
        result <- as.numeric((overlap_area / union_area) * 100)  # Ensure numeric
        valid_result <- TRUE
      }
      
      attempt <- attempt + 1
    }
    
    result  # return numeric result
  }, simplify = TRUE)
  
  # create a tibble and ensure numeric type for percent_overlap
  tibble(
    percent_overlap = as.numeric(replicate_results),  # ensure numeric column
    individuals = sample_size
  )
}
```

### A Note on Geometry Errors
The above function was created to avoid GEOS exceptions, for more detailed 
information see [here](https://github.com/r-spatial/sf/issues/1668). In short,
`st_intersection()` can only handle so much overlapping elliptical or spherical
complexity. The below code *does* produce small geometry errors, but does not
produce GEOS exceptions that stop the code entirely. The geometry errors result 
in small rounding differences when handling extremely small amounts of 
curvilinear space. They are unavoidable with the elliptical complexity of this 
dataset. These small rounding differences do not impact the overall results. 
This is ostensibly why `st_intersection()` will proceed with a geometry error 
and not with a GEOS exception. To test this, one can perform a sensitivity 
analysis by tweaking `st_set_precision()`.

## Model Overlap as Individuals Increase
```{r, warning=FALSE}
set.seed(3844)
all_tiss <- map_dfr(2:19, ~ calculate_overlap(.x, sf_ellipses, union_area)) |> 
  mutate(group = "All Tissue")
```

## All Bones 
### SIBER
```{r}
All_Bones_SIBER <- my_data |>
  dplyr::filter(Tissue %in% "Bone") |>
  dplyr::select(d13Cdiet, d15Ndiet, Individual) |>
  dplyr::mutate(community = 1) |>
  dplyr::rename(iso1 = d13Cdiet,
                iso2 = d15Ndiet,
                group = Individual)

siber.example <- createSiberObject(All_Bones_SIBER)

community.hulls.args <- list(col = 1, lty = 1, lwd = 1)
group.ellipses.args  <- list(n = 100, p.interval = 0.95, lty = 1, lwd = 2)
group.hull.args      <- list(lty = 2, col = "grey20")

plotSiberObject(siber.example,
                ax.pad = 2, 
                hulls = F, community.hulls.args, 
                ellipses = F, group.ellipses.args,
                group.hulls = F, group.hull.args,
                bty = "L",
                iso.order = c(1,2),
                xlab=expression({delta}^13*C[diet]~'\u2030'),
                ylab=expression({delta}^15*N[diet]~'\u2030'),
                cex = 1.5,
                cex.axis = 1.5,
                cex.lab = 1.5,
                col.axis = "gray29",
                col.lab = "gray29"
)

plotGroupEllipses(siber.example, n = 100, p.interval = 0.95, small.sample = TRUE,
                    lty = 1, lwd = 3)

group.ML3 <- groupMetricsML(siber.example)
print(group.ML3)
```

## Convert SIBER ellipses to sf polygons
```{r}
w <- siberKapow(
  All_Bones_SIBER,
  isoNames = c("iso1", "iso2"),
  group = "group",
  pEll = 0.95
)

# convert owin coordinates to sf polygons
sf_ellipses <- map(w[["owin.coords"]], ~ st_as_sf(.x)) |> 
  map(~ .x[["geom"]][[1]]) |> 
  st_sfc() |> 
  st_sf()
```

## Basic Overlap Calculation and Visualization
```{r}
i_bone <- sf_ellipses |> 
  st_set_precision(45) |>  
  st_make_valid() |> 
  st_intersection() |> 
  mutate(group = "All Bone")

i_bone["n.overlaps"] |> 
  st_collection_extract("POLYGON") |> 
  plot(main = "All Bone", breaks = 0:15, at = c(0, 5, 10, 15))

# precomputed total unionized area important in function below
union_area <- i_bone |>
  st_union() |>
  st_area()
  

overlap <- i_bone |>
  dplyr::filter(!n.overlaps == 1) |>
  st_union() |>
  st_area()

(overlap/union_area)*100
```

# Model Overlap as Individuals Increase
```{r, warning=FALSE}
set.seed(7959)
all_bone <- map_dfr(2:19, ~ calculate_overlap(.x, sf_ellipses, union_area)) |> 
  mutate(group = "All Bone")
```

## Long Bones
### SIBER
```{r}
Long_Bones_SIBER <- my_data |>
  dplyr::filter(Bone_Type %in% "Long") |>
  dplyr::select(d13Cdiet, d15Ndiet, Individual) |>
  dplyr::mutate(community = 1) |>
  dplyr::rename(iso1 = d13Cdiet,
                iso2 = d15Ndiet,
                group = Individual)

siber.example <- createSiberObject(Long_Bones_SIBER)

community.hulls.args <- list(col = 1, lty = 1, lwd = 1)
group.ellipses.args  <- list(n = 100, p.interval = 0.95, lty = 1, lwd = 2)
group.hull.args      <- list(lty = 2, col = "grey20")

plotSiberObject(siber.example,
                ax.pad = 2, 
                hulls = F, community.hulls.args, 
                ellipses = F, group.ellipses.args,
                group.hulls = F, group.hull.args,
                bty = "L",
                iso.order = c(1,2),
                xlab=expression({delta}^13*C[diet]~'\u2030'),
                ylab=expression({delta}^15*N[diet]~'\u2030'),
                cex = 1.5,
                cex.axis = 1.5,
                cex.lab = 1.5,
                col.axis = "gray29",
                col.lab = "gray29"
)

plotGroupEllipses(siber.example, n = 100, p.interval = 0.95, small.sample = TRUE,
                    lty = 1, lwd = 3)

group.ML5 <- groupMetricsML(siber.example)
print(group.ML5)

```

## Convert SIBER ellipses to sf polygons
```{r}
w <- siberKapow(
  Long_Bones_SIBER,
  isoNames = c("iso1", "iso2"),
  group = "group",
  pEll = 0.95
)

# convert owin coordinates to sf polygons
sf_ellipses <- map(w[["owin.coords"]], ~ st_as_sf(.x)) |> 
  map(~ .x[["geom"]][[1]]) |> 
  st_sfc() |> 
  st_sf()
```

## Basic Overlap Calculation and Visualization
```{r}
i_long <- sf_ellipses |> 
  st_set_precision(45) |>  
  st_make_valid() |> 
  st_intersection() |> 
  mutate(group = "Long Bone")

i_long["n.overlaps"] |> 
  st_collection_extract("POLYGON") |> 
  plot(main = "Long Bone", breaks = 0:15, at = c(0, 5, 10, 15))

# precomputed total unionized area important in function below
union_area <- i_long |>
  st_union() |>
  st_area()
  

overlap <- i_long |>
  dplyr::filter(!n.overlaps == 1) |>
  st_union() |>
  st_area()

(overlap/union_area)*100
```

# Model Overlap as Individuals Increase
```{r, warning=FALSE}
set.seed(5941)
long_bone <- map_dfr(2:19, ~ calculate_overlap(.x, sf_ellipses, union_area)) |> 
  mutate(group = "Long Bone")
```

## Figures

### Supplemental Figure 2
```{r}
#| fig-height: 5
#| fig.width: 5

overlap_area <- bind_rows(i_all, i_bone, i_long) |> 
  #st_collection_extract("POLYGON") |> 
  filter(!n.overlaps == 1) |>
  group_by(group) |> 
  nest() |> 
  mutate(overlap_union = map(data, st_union)) |> 
  select(group, overlap_union) |> 
  unnest(cols = overlap_union) |> 
  mutate(group = factor(group, levels = c("All Tissue", "All Bone", 
                                             "Long Bone"))) |> 
  ungroup()


all_area <- bind_rows(i_all, i_bone, i_long) |> 
  #st_collection_extract("POLYGON") |> 
  group_by(group) |> 
  nest() |> 
  mutate(all_union = map(data, st_union)) |> 
  select(group, all_union) |> 
  unnest(cols = all_union) |> 
  mutate(group = factor(group, levels = c("All Tissue", "All Bone", 
                                             "Long Bone"))) |> 
  ungroup()

area <- merge(all_area, overlap_area) |> 
  pivot_longer(cols = c(all_union, overlap_union), names_to = "union_type",
               values_to = "union") |> 
  mutate(union_group = case_when(union_type == "all_union" ~ "Total Area",
                           union_type == "overlap_union" ~ "Overlapping Area"),
         union_group = factor(union_group, levels = c("Total Area", 
                                                      "Overlapping Area")))
area |> 
  ggplot() +
  geom_sf(aes(geometry = union, color = union_group, fill = union_group,
              linetype = union_group), 
          linewidth = 0.5) +  
  facet_grid(group ~ union_group) +
  scale_fill_manual(values = c("transparent", "#6A00A8FF")) +
  scale_color_manual(values = c("#0D0887FF", "#0D0887FF")) +
  scale_linetype_manual(values = c(1, 2)) +
  labs(x = "δ<sup>13</sup>C (‰)", y = "δ<sup>15</sup>N (‰)") +
  theme_bw() +
  theme(legend.position = "none",
        strip.background = element_blank(),
        strip.text = element_text(size = 13, face = "bold"),
        axis.title.x = element_markdown(size = 11, face = "bold"),
        axis.title.y = element_markdown(size = 11, face = "bold"))

ggsave("figs/supp_fig_2.jpg", dpi = 300, height = 5, width = 5)
```

### Figure 5
```{r}
#| fig-height: 3.5
#| fig.width: 7

bind_rows(i_all, i_bone, i_long) |> 
  st_collection_extract("POLYGON") |> 
  mutate(group = factor(group, levels = c("All Tissue", "All Bone", 
                                             "Long Bone")),
         n.overlaps = n.overlaps - 1) |> 
  rename(s = 4) |> 
  ggplot() +
  geom_sf(aes(geometry = s, fill = n.overlaps), color = "black", 
          linewidth = 0.1) +
  facet_wrap(~ group, nrow = 1) +
  labs(x = "<i>δ</i><sup>13</sup>C<sub>diet</sub> (VPDB, ‰)", 
       y = "<i>δ</i><sup>15</sup>N<sub>diet</sub> (AIR, ‰)", 
       fill = "Number of\nOverlaps") +
  scale_fill_viridis_c(option = "plasma") +
  theme_bw() +
  theme(legend.position = "bottom",
        strip.background = element_blank(),
        strip.text = element_text(size = 13, face = "bold"),
        axis.title.x = element_markdown(size = 11, face = "bold"),
        axis.title.y = element_markdown(size = 11, face = "bold"))

ggsave("figs/fig_5.jpg", dpi = 300, height = 3.5, width = 7)

bind_rows(i_all, i_bone, i_long) |> 
  st_collection_extract("POLYGON") |> 
  mutate(group = factor(group, levels = c("All Tissue", "All Bone", 
                                             "Long Bone")),
         n.overlaps = n.overlaps - 1) |> 
  group_by(group) |> 
  summarize(max_overlap = max(n.overlaps))
  
```

### Supplemental Figure 3
```{r}
#| fig-height: 7
#| fig.width: 4

bind_rows(all_tiss, all_bone, long_bone) |> 
  drop_na() |> 
  mutate(group = factor(group, levels = c("All Tissue", "All Bone", "Long Bone")),
         individuals = factor(individuals)) |> 
  ggplot(aes(x = individuals, y = percent_overlap, group = individuals)) +
  geom_jitter(size = 1.5 , alpha = 0.20, width = 0.15, color = "#6A00A8FF") +
  geom_boxplot(alpha = 0.6, linewidth = 0.5, outlier.shape = NA, 
               color = "#0D0887FF") +
  theme_bw() +
  facet_wrap(~ group, nrow = 3) +
  labs(x = "Number of Individuals", y = "% Overlap") +
  scale_color_grey() +
  theme(strip.background = element_blank(),
        strip.text = element_text(size = 13, face = "bold"),
        panel.grid.major.x = element_blank(),
        axis.title = element_text(size = 11, face = "bold"),
        axis.ticks.x = element_blank())

ggsave("figs/supp_fig_3.jpg", dpi = 300, height = 7, width = 4)
```

### Figure 6
```{r}
#| fig-height: 3
#| fig.width: 7.5

bind_rows(all_tiss, all_bone, long_bone) |> 
  drop_na() |> 
  mutate(group = factor(group, levels = c("All Tissue", "All Bone", 
                                          "Long Bone"))) |> 
  ggplot(aes(x = individuals, y = percent_overlap)) +
  geom_point(alpha = 0.3, size = 2, color = "#0D0887FF") +
  geom_smooth(method = "lm", formula = y ~ x, color = "#E16462FF") +
  stat_poly_eq(aes(label = after_stat(eq.label))) +
  facet_wrap(~ group, nrow = 1) +
  labs(x = "Number of Individuals", y = "%Overlap") +
  theme_bw() +
  theme(strip.background = element_blank(),
        strip.text = element_text(size = 13, face = "bold"),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.title = element_text(size = 11, face = "bold"))

ggsave("figs/fig_6.jpg", dpi = 300, height = 3, width = 7.5)

bind_rows(all_tiss, all_bone, long_bone) |> 
  drop_na() |> 
  group_by(group) |>
  nest() |> 
  mutate(lm = map(data, ~ lm(.$percent_overlap ~ log(.$individuals))),
         pred = map2(lm, data, ~ predict(.x, new_data = .y))) |> 
  select(group, data, pred) |> 
  unnest(cols = c(group, data, pred)) |> 
  distinct(individuals, pred) |> 
  group_by(group) |> 
  mutate(per_change = (pred - lag(pred))) |> 
  summarize(mean_rate = round(mean(per_change, na.rm = TRUE), 2))
```
